// /******************************************************************************

//                               Online C++ Compiler.
//               Code, Compile, Run and Debug C++ program online.
// Write your code in this editor and press "Run" button to compile and execute it.

// *******************************************************************************/

// #include <iostream>

// using namespace std;

// class node{
//     public:
//     int data;
//     node* next;
    
//     node(int d){
//         this->data=d;
//         this->next=NULL;
//     }
// };

// void insertAtHead(node* &head,int data){
    
//     node* temp=new node(data);
//     temp->next=head;
//     head=temp;
    
    
// }
// void print(node* head){
//     node* temp=head;
    
//     while(temp!=NULL){
//         cout<<temp->data<<" ";
//         temp=temp->next;
//     }
// }

// // int findmiddle(node* head){
// //     int cnt=0;
// //      node* temp=head;
// //     while(temp!=NULL){
// //         temp=temp->next;
// //         cnt++;
// //     }
    
// //     int i=0;
// //   int mid=cnt/2;
// //   node* temp1=head;
// //     while(i<mid){
// //         temp1=temp1->next;
// //         i++;
// //     }
// //     return temp1->data;
    
// // }

// node* reverse(node* head){
//     node* prev=NULL;
//     node* curr=head;
//     node* forward;
    
//     while(curr!=NULL){
//         forward=curr->next;
//         curr->next=prev;
//         prev=curr;
//         curr=forward;
//     }
//     return prev;
    
// }

// int main()
// {
//  node* node1=new node(12);
   
//   node* head=node1;
   
//   insertAtHead(head,13);
// insertAtHead(head,14);
// insertAtHead(head,15);
// insertAtHead(head,16);
// cout<<"linklist:"<<endl;
// print(head);

// // int data=findmiddle(head);
// // cout<<"data:"<<data<<endl;

// head=reverse(head);
// cout<<"linklist:"<<endl;
// print(head);
//     return 0;
// }


#include <bits/stdc++.h>

using namespace std;

class Node{
    public:
    int data;
    Node* next;
    
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};

void insertATtail(Node* &head,int d){
    Node* temp=new Node(d);
   temp->next=head;
  head=temp;
}

void print(Node* &head){
    Node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
bool find(vector<int>arr){
    int n=arr.size();
    int s=0,e=n-1;
    while(s<=e){
        if(arr[s++]!=arr[e--]){
            return 0;
        }
    }
    return 1;
}
void palindrome(Node* head){
    vector<int>v;
    Node* temp=head;
    while(temp!=NULL){
        v.push_back(temp->data);
        temp=temp->next;
    }
    bool check=find(v);
    cout<<check<<endl;
}

int main()
{
   Node* node1=new Node(12);

Node* head=node1;
insertATtail(head,11);

insertATtail(head,12);
// insertATtail(head,10);
// insertATtail(head,9);
print(head);
cout<<endl;



palindrome(head);
    return 0;
}
