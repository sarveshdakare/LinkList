class Solution
{
    private:
    struct Node* reverse(struct Node* first){
        Node* curr=first;
        Node* prev=NULL;
        Node* forward=NULL;
        
        while(curr!=NULL){
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }
    void insertAtTail(struct Node* &head, struct Node* &tail, int val) {
        
        Node* temp = new Node(val);
        //empty list
        if(head == NULL) {
            head = temp;
            tail = temp;
            return;
        }
        else
        {
            tail -> next = temp;
            tail = temp;
        }
    }
 
    public:
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // code here
        
        int carry=0;
        
        Node* l1=reverse(first);
        Node* l2=reverse(second);
        
       Node *dummy=new Node(0);
        Node *temp=dummy;
        while(l1!=NULL or l2!=NULL or carry!=0){
            int sum=0;
            if(l1!=NULL){
                sum+=l1->data;
                l1=l1->next;
            }
            if(l2!=NULL){
                sum+=l2->data;
                l2=l2->next;
            }
            sum=sum+carry;
            carry=sum/10;
            Node *node=new Node(sum%10);
            temp->next=node;
            temp=temp->next;
        }
        return reverse(dummy->next);
        
    }
    
};
